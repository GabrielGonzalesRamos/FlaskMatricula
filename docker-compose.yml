version: '3.3'
networks:
  flask-network:
    driver: bridge

services:
  psql:
    image: docker.io/library/postgres:15.4
    container_name: psql
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
    - ~/Documentos/TECSUP/C1/FGD/S15/psql/data:/var/lib/postgresql/data
    networks:
      - flask-network
    healthcheck:
      test: ["CMD", "psql", "-U", "${DATABASE_USER}", "-w", "${DATABASE_PASSWORD}", "-d", "${DATABASE_NAME}", "-c", "SELECT 1"]
      timeout: 20s
      retries: 3
  # mssql:
  #   image: mcr.microsoft.com/mssql/server:2022-latest
  #   container_name: mssql
  #   ports:
  #     - 1433:1433
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - MSSQL_SA_PASSWORD=${DATABASE_PASSWORD}
  #     - MSSQL_PID=Developer
  #   volumes:
  #   - ~/Documentos/TECSUP/C1/FGD/S15/mssql/data:/var/opt/mssql
  #   networks:
  #     - flask-network
  #   healthcheck:
  #     test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "${DATABASE_PASSWORD}", "-d", "${DATABASE_NAME}", "-Q", "SELECT 1"]
  #     timeout: 20s
  #     retries: 3
  flask:
    image: docker.io/gabrielgonzales/gg-dev:GDR-001
    container_name: flask
    ports:
      - 5000:5000
    environment:
      - DATABASE_URI_PROD=${DATABASE_URI_PROD}
    networks:
      - flask-network
    depends_on:
      - psql
  ngrok:
    image: ngrok/ngrok:alpine
    container_name: ngrok
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
      - REGION=us
    command: 'http flask:5000'
    networks:
      - flask-network
    depends_on:
      - flask
